CLASS:: GUICV
SUMMARY:: GUICV base class
CATEGORIES:: Green
RELATED:: Classes/AbstractGUICV


DESCRIPTION::
A helper class defining the look and feel of a few GUI widgets. Contains a skin and methods for generating styled views.


SUBSECTION:: Class hierarchy

See the following classes for more information.

CLASSTREE:: AbstractGUICV


SUBSECTION:: Skin

Access the GUICV skin with...
CODE::
GUI.skins.guiCV;

/*
-> ( 'background': Color(), 'fontSmallSpecs': [ Menlo, 8 ], 'knobWidth': 40, 'sliderWidth': 20,
  'spacing': 4, 'palette': a QPalette, 'foreground': Color(0.019607843137255, 0.24313725490196, 0.023529411764706), 'highlight': Color(0.36862745098039, 0.97647058823529, 0.36862745098039), 'fontColor': Color(0.36862745098039, 0.70980392156863, 0.36862745098039),
  'buttonHeight': 15, 'fontSpecs': [ Menlo, 10 ], 'margin': Point( 4, 4 ), 'sliderHeight': 75 )
*/
::

and overwrite entries like this...
CODE::
GUI.skins.guiCV.foreground= Color.blue;
//will change all GUICV widgets
::

GUICV's skin expects the following entries...

DEFINITIONLIST::
## background || a LINK::Classes/Color::.
## buttonHeight || an LINK::Classes/Integer::.
## fontColor ||  a LINK::Classes/Color::.
## fontSpecs || an LINK::Classes/Array:: with fontName LINK::Classes/String:: and fontSize LINK::Classes/Integer:: e.g. CODE::["Menlo", 10]::.
## fontSmallSpecs || an LINK::Classes/Array:: with fontName LINK::Classes/String:: and fontSize LINK::Classes/Integer:: e.g. CODE::["Menlo", 8]::.
## foreground || a LINK::Classes/Color::.
## highlight || a LINK::Classes/Color::.
## knobWidth || an LINK::Classes/Integer::. Also used knob height and for horizontal sliders (CODE::knobWidth*2::).
## margin || an LINK::Classes/Integer::.
## sliderHeight || an LINK::Classes/Integer::. For vertical sliders. Horizontal sliders use CODE::buttonHeight::.
## sliderWidth || an LINK::Classes/Integer::. For vertical sliders. Horizontal sliders use CODE::knobWidth*2::.
## spacing || an LINK::Classes/Integer::.
## palette || a LINK::Classes/QPalette::.
::


SUBSECTION:: Methods

The methods for generating views are used like this...
CODE::
GUICV.knob().front;
::


CLASSMETHODS::

METHOD:: button, knob, levelIndicator, numberBox, popUpMenu, slider, staticText

ARGUMENT:: parent

ARGUMENT:: bounds


SUBSECTION:: tools

METHOD:: fixDec
LINK::Classes/Float:: to LINK::Classes/String:: conversion with fixed number of decimals.

CODE::
GUICV.fixDec(0.123)  //0.12
GUICV.fixDec(0.19, 1)  //0.2
GUICV.fixDec(3.3e-2)  //0.03
::

ARGUMENT:: val
A LINK::Classes/Float::.

ARGUMENT:: numDecimals
Number of decimals in string.

RETURNS:: a LINK::Classes/String::.


EXAMPLES::

SUBSECTION:: basic example

CODE::
//code <-> gui
(
a= GUICVKnob().front;
)
a.value;  //click the knob and this will be different
a.value= 1.0.rand;  //set the knob's value from code

a.close;
::

SUBSECTION:: action function

CODE::
a= GUICVKnob(spec: \freq.asSpec).action_({|v| v.value.postln}).front;
a.set(1.0.rand);  //set the knob's normalised value from code
a.action= {|v| [v.value, v.get].postln};  //change action
a.set(1.0.rand);

a.close;
::

SUBSECTION:: linked widgets

CODE::
//two views interlinked
(
var knob= GUICVKnob();
var number= GUICVNumberBox();
number.link(knob);
View().layout_(VLayout(knob, number)).front;
)

//similar - two views using the same reference
(
var r= Ref(0.5);
View(bounds:100@200).layout_(VLayout(
	GUICVKnob(ref:r),
	GUICVSlider(ref:r)
)).front
)

//more views (without Layout Management)
(
var w, a, b, c;
w= Window("test").front;
a= GUICVKnob(w, Rect(100, 100, 100, 100));
b= GUICVNumberBox(w, 100@20, a.ref)
.scroll_step_(0.01);
c= GUICVSliderLabel(w, Rect(10, 50, 300, 10), a.ref)
.string_("test")
.orientation_(\horizontal);
)

//volume control
s.boot;
a= {|amp= 0.1| SinOsc.ar([400, 404], 0, amp)}.play;
(
var spec= ControlSpec(-inf, 3, 'db', 0, -10);
var slider= GUICVSliderLabel(spec: spec)
.string_("volume")
.orientation_(\horizontal)
.action_({|v| a.set(\amp, v.value.dbamp)});
var number= GUICVNumberBox(spec: spec);
View(nil, 400@200).layout_(VLayout(slider, number)).front;
slider.link(number);
)
a.free;
::

SUBSECTION:: softSet

CODE::
//MIDI ControlChange (#2) with softSet
(
a= GUICVKnob().front;
MIDIIn.connectAll;
MIDIdef.cc(\knob, {|val| {a.softSet(val.postln/127, 0.1)}.defer}, 2);
)

//two views linked to one midi controller (#2)
(
View().layout_(VLayout(
	a= GUICVKnob(spec: ControlSpec(0, 127, 'lin', 1)),
	b= GUICVNumberBox(ref: a.ref, spec: ControlSpec(0, 127, 'lin', 1))
)).front;
MIDIIn.connectAll;
MIDIdef.cc(\knob, {|val| {a.softSet(val.postln/127, 0.1)}.defer}, 2);
);
a.value= 32;
a.get;
a.set(0.5);
a.value;

MIDIdef(\knob).free;
::
