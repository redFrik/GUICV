CLASS:: AbstractGUICV
SUMMARY:: abstract class
CATEGORIES:: Green
RELATED:: Classes/GUICV


DESCRIPTION::

NOTE::
This is an abstract class. Do not instantiate - use the subclasses
::


SUBSECTION:: defaultKeyDownAction

When in focus, GUICV widgets use key CODE::D:: for jumping to the given spec's default value.

The standard defaultKeyDownAction keys still work (CODE::R:: for random, CODE::X:: maximum, CODE::N:: minimum, CODE::C:: center + arrow keys).


CLASSMETHODS::

METHOD:: new
Create a new widget. The widget works like any other LINK::Classes/View:: and be inserted into a LINK::Classes/Layout:: or brought forward using CODE::.front::.

ARGUMENT:: parent

ARGUMENT:: bounds

ARGUMENT:: ref
A LINK::Classes/Ref:: instance. If not given, one will be created and its value will be CODE::0::.

ARGUMENT:: spec
A LINK::Classes/ControlSpec:: instance. If not given, one will be created using CODE::nil.asSpec::.

ARGUMENT:: args
Optional additional arguments that will be passed to the widget class when created. Can be an array with keyValue pairs or an dictionary. An example is CODE::\thumbSize:: for sliders.

ARGUMENT:: update
LINK::Classes/Boolean:: flag for blocking value initialisation. Seldom used.

DISCUSSION::
An example of when the update flag is needed to be false is when several widgets are linked to the same ref and one want to avoid calling the action function at initialisation.


INSTANCEMETHODS::

PRIVATE:: initAbstractGUICV, prConnect, prCreateView, prDkey

METHOD:: action
Get or set the LINK::Classes/Function:: to be evaluated on widget value change.

CODE::
GUICVKnob().front.action_({|v| v.value.postln});
::

NOTE::
Will also be called when a value is repeated even though internally the view isn't redrawn for repeats (to save CPU).
::

METHOD:: ref
The LINK::Classes/Ref::.

METHOD:: spec
The LINK::Classes/ControlSpec::.

METHOD:: value
Get or set the current widget value. This value will be constrained by the spec.

METHOD:: get
Get the normalised value (using CODE::spec.unmap::).

RETURNS::
A LINK::Classes/Float:: between 0.0 and 1.0

METHOD:: set
Set the normalised value (using CODE::spec.map::).

ARGUMENT:: val
A LINK::Classes/Float:: between 0.0 and 1.0

METHOD:: softSet
If val is within range of the current widget value, set the widget value. Useful for MIDI controllers.

ARGUMENT:: val
A normalised LINK::Classes/Float:: (between 0.0 and 1.0).

ARGUMENT:: within
A LINK::Classes/Float:: specifying a range (+/-).

RETURNS:: LINK::Classes/True:: if current widget value was updated, LINK::Classes/False:: if not (out of range).

METHOD:: front
Create a LINK::Classes/Window:: with the widget.

METHOD:: close
Close widget and remove controllers.
