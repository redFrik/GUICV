CLASS:: AbstractGUICVView
SUMMARY:: abstract class
CATEGORIES:: Green
RELATED:: Classes/CV, Classes/GUICV, Overviews/GUICVOverview


DESCRIPTION::

NOTE::
This is an abstract class. Do not instantiate - use the subclasses
::

CLASSTREE:: AbstractGUICVView


SUBSECTION:: defaultKeyDownAction

When in focus, GUICV widgets use key CODE::D:: for jumping to the given spec's default value.

The standard defaultKeyDownAction keys still work (CODE::R:: for random, CODE::X:: maximum, CODE::N:: minimum, CODE::C:: center + arrow keys).


CLASSMETHODS::

METHOD:: new
Create a new GUI widget. The widget works like any other LINK::Classes/View:: and be inserted into a LINK::Classes/Layout:: or brought forward using LINK::#-front::.

ARGUMENT:: parent

ARGUMENT:: bounds

ARGUMENT:: ref
A LINK::Classes/Ref:: instance. If not given, one will be created and its value will be taken from the spec's default (usually CODE::0::).

ARGUMENT:: spec
A LINK::Classes/ControlSpec:: instance. If not given, one will be created using CODE::nil.asSpec::.

ARGUMENT:: update
LINK::Classes/Boolean:: flag for allowing LINK::#-action:: to run at initialisation. Seldom need to change.

DISCUSSION::
When several widgets are linked one can use the update flag to stop calling some of the action functions at initialisation. For example to avoid sending duplicate .set messages to a synth.


INSTANCEMETHODS::

PRIVATE:: initAbstractGUICVView, prConnect, prCreateView, prDkey

METHOD:: cv
The internal LINK::Classes/CV::.

COPYMETHOD:: CV -ref

COPYMETHOD:: CV -spec


SUBSECTION:: Value access

COPYMETHOD:: CV -default

COPYMETHOD:: CV -get

COPYMETHOD:: CV -set

COPYMETHOD:: CV -softSet

COPYMETHOD:: CV -value


SUBSECTION:: Actions

METHOD:: action
Get or set the LINK::Classes/Function:: to be evaluated on widget value change.

CODE::
a= GUICVKnob().front.action_({|v| v.value.postln});
a.value= 1.0.rand;
::

NOTE::
Will also be called when a value is repeated even though internally the view isn't redrawn for repeats (this to save CPU).
::

METHOD:: update
Force the action to evaluate (not action of any linked widgets).


SUBSECTION:: Interconnection

METHOD:: link
Connect two GUI widgets.

ARGUMENT:: widget
Another instance that will reflect value changes.

METHOD:: unlink
Disconnect any linked GUI widgets.


SUBSECTION:: GUI

METHOD:: front
Create a LINK::Classes/Window:: with the widget.

METHOD:: close
Close widget and remove controllers.


EXAMPLES::

SUBSECTION:: basic example

CODE::
//code <-> gui
(
a= GUICVKnob().front;
)
a.value;  //click the knob and this will be different
a.value= 1.0.rand;  //set the knob's value from code

a.close;
::

SUBSECTION:: action function

CODE::
a= GUICVKnob(spec: \freq.asSpec).action_({|v| v.value.postln}).front;
a.set(1.0.rand);  //set the knob's normalised value from code
a.action= {|v| [v.value, v.get].postln};  //change action
a.set(1.0.rand);

a.close;
::

SUBSECTION:: linked widgets

CODE::
//two views interlinked
(
var knob= GUICVKnob();
var number= GUICVNumberBox();
number.link(knob);
View().layout_(VLayout(knob, number)).front;
)

//similar - two views using the same reference
(
var r= Ref(0.5);
View(bounds:100@200).layout_(VLayout(
	GUICVKnob(ref:r),
	GUICVSlider(ref:r)
)).front
)

//more views (without Layout Management)
(
var w, a, b, c;
w= Window("test").front;
a= GUICVKnob(w, Rect(100, 100, 100, 100));
b= GUICVNumberBox(w, 100@20, a.ref)
.scroll_step_(0.01);
c= GUICVSliderLabel(w, Rect(10, 50, 300, 10), a.ref)
.string_("test")
.orientation_(\horizontal);
)

//volume control
s.boot;
a= {|amp= 0.1| SinOsc.ar([400, 404], 0, amp)}.play;
(
var spec= ControlSpec(-inf, 3, 'db', 0, -10);
var slider= GUICVSliderLabel(spec: spec)
.string_("volume")
.orientation_(\horizontal)
.action_({|v| a.set(\amp, v.value.dbamp)});
var number= GUICVNumberBox(spec: spec);
View(nil, 400@200).layout_(VLayout(slider, number)).front;
slider.link(number);
)
a.free;
::

SUBSECTION:: softSet

CODE::
//MIDI ControlChange (#2) with softSet
(
a= GUICVKnob().front;
MIDIIn.connectAll;
MIDIdef.cc(\knob, {|val| {a.softSet(val.postln/127, 0.1)}.defer}, 2);
)

//two views linked to one midi controller (#2)
(
View().layout_(VLayout(
	a= GUICVKnob(spec: ControlSpec(0, 127, 'lin', 1)),
	b= GUICVNumberBox(ref: a.ref, spec: ControlSpec(0, 127, 'lin', 1))
)).front;
MIDIIn.connectAll;
MIDIdef.cc(\knob, {|val| {a.softSet(val.postln/127, 0.1)}.defer}, 2);
);
a.value= 32;
a.get;
a.set(0.5);
a.value;

MIDIdef(\knob).free;
::
